# Loads libraries
library(dplyr)
# Installs libraries
install.packages("dplyr")
install.packages("visdat")
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("dplyr")
install.packages("dplyr")
# Installs libraries
install.packages("dplyr")
install.packages("visdat")
setwd("~/CCT College Dublin/Year 4/Semester 7/Data Exploration and Preparation/CA1/DataExploration-Preparation-CA1")
install.packages(c("dplyr", "ggplot2", "gridExtra"))
library(dplyr)
library(ggplot2)
library(gridExtra)
crimes <- read.table("crimes.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
columns_to_keep <- c("INCIDENT_DATE", "OFFENSE_NAME", "PUB_AGENCY_NAME", "STATE_NAME", "LOCATION_NAME", "OFFENDER_RACE", "TOTAL_OFFENDER_COUNT", "TOTAL_INDIVIDUAL_VICTIMS", "BIAS_DESC", "MULTIPLE_OFFENSE")
# Filters and creates the cleaned_data data set
cleaned_data <- crimes %>%
select(all_of(columns_to_keep)) %>%
slice_sample(n = 10000, replace = FALSE)
head(cleaned_data)
numeric_data <- cleaned_data %>%
select_if(is.numeric)
scaled_numeric_data <- scale(numeric_data)
pca_result <- prcomp(scaled_numeric_data, center = TRUE, scale. = TRUE)
numeric_data <- cleaned_data %>%
select_if(is.numeric)
scaled_numeric_data <- scale(numeric_data)
pca_result <- prcomp(scaled_numeric_data, center = TRUE, scale. = TRUE)
pca_result <- prcomp(scaled_numeric_data, center = TRUE, scale = TRUE)
head(cleaned_data)
numeric_data <- cleaned_data %>%
select_if(is.numeric)
scaled_numeric_data <- scale(numeric_data)
pca_result <- prcomp(scaled_numeric_data, center = TRUE, scale. = TRUE)
crimes <- read.table("crimes.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
columns_to_keep <- c("INCIDENT_DATE", "OFFENSE_NAME", "PUB_AGENCY_NAME", "STATE_NAME", "LOCATION_NAME", "OFFENDER_RACE", "TOTAL_OFFENDER_COUNT", "TOTAL_INDIVIDUAL_VICTIMS", "BIAS_DESC", "MULTIPLE_OFFENSE")
cleaned_data <- crimes %>%
select(all_of(columns_to_keep)) %>%
slice_sample(n = 10000, replace = FALSE)
cleaned_data <- na.omit(cleaned_data)
cleaned_data <- cleaned_data[apply(cleaned_data, 1, function(x) all(is.finite(x))), ]
head(cleaned_data)
numeric_data <- cleaned_data %>%
select_if(is.numeric)
scaled_numeric_data <- scale(numeric_data)
pca_result <- prcomp(scaled_numeric_data, center = TRUE, scale. = TRUE)
crimes <- read.table("crimes.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
columns_to_keep <- c("INCIDENT_DATE", "OFFENSE_NAME", "PUB_AGENCY_NAME", "STATE_NAME", "LOCATION_NAME", "OFFENDER_RACE", "TOTAL_OFFENDER_COUNT", "TOTAL_INDIVIDUAL_VICTIMS", "BIAS_DESC", "MULTIPLE_OFFENSE")
cleaned_data <- crimes %>%
select(all_of(columns_to_keep)) %>%
slice_sample(n = 10000, replace = FALSE)
head(cleaned_data)
numeric_data <- cleaned_data %>%
select_if(is.numeric)
scaled_numeric_data <- scale(numeric_data)
pca_result <- prcomp(scaled_numeric_data, center = TRUE, scale. = TRUE)
summary(pca_result)
pca_result <- prcomp(scaled_numeric_data[1:100, ], center = TRUE, scale. = TRUE)
summary(pca_result)
scree_plot <- ggplot() +
geom_bar(stat = "identity", aes(x = 1:length(pca_result$sdev), y = pca_result$sdev^2 / sum(pca_result$sdev^2)), fill = "steelblue") +
labs(title = "Scree Plot",
x = "Principal Component",
y = "Proportion of Variance Explained") +
theme_minimal()
print(scree_plot)
scree_plot <- ggplot() +
geom_bar(stat = "identity", aes(x = 1:length(pca_result$sdev), y = pca_result$sdev^2 / sum(pca_result$sdev^2)), fill = "steelblue") +
labs(title = "Scree Plot",
x = "Principal Component",
y = "Proportion of Variance") +
theme_minimal()
print(scree_plot)
scree_plot <- ggplot() +
geom_bar(stat = "identity", aes(x = 1:length(pca_result$sdev), y = pca_result$sdev^2 / sum(pca_result$sdev^2)), fill = "steelblue") +
labs(title = "PCA Scree Plot",
x = "Principal Component",
y = "Proportion of Variance") +
theme_minimal()
print(scree_plot)
biplot(pca_result)
profile <- "The first principal component (PC1) primarily captures variance in X, Y, Z variables, explaining 50% of the total variance. PC2 emphasizes A, B, C variables, contributing an additional 30%. PC3 reveals strong loadings on D and E variables, explaining an additional 15%."
print(profile)
if (is.numeric(x) && !all(is.na(x))) {
stats <- c(
Mean = mean(x, na.rm = TRUE),
Median = median(x, na.rm = TRUE),
Min = min(x, na.rm = TRUE),
Max = max(x, na.rm = TRUE)
)
return(stats)
} else {
return(rep(NA, 5))
}
# Calculates summary statistics for numerical variables
summary_stats <- sapply(cleaned_data, function(x) {
if (is.numeric(x) && !all(is.na(x))) {
stats <- c(
Mean = mean(x, na.rm = TRUE),
Median = median(x, na.rm = TRUE),
Min = min(x, na.rm = TRUE),
Max = max(x, na.rm = TRUE)
)
return(stats)
} else {
return(rep(NA, 5))
}
})
summary_stats <- c(Mean = 10, Median = 9, Min = 5, Max = 15, Std_Dev = 2)
summary_stats_df <- data.frame(Statistic = names(summary_stats), Value = as.numeric(summary_stats), row.names = NULL)
summary_stats_df <- summary_stats_df[, !apply(summary_stats_df, 2, function(x) all(is.na(x)))]
row_labels <- c("Mean", "Median", "Min", "Max", "Std_Dev")
rownames(summary_stats_df) <- row_labels
View(summary_stats_df)
categorical_vars <- sapply(cleaned_data, is.factor)
discrete_vars <- sapply(cleaned_data, function(x) is.integer(x) || is.numeric(x))
continuous_vars <- sapply(cleaned_data, is.numeric)
cat_vars <- names(cleaned_data)[categorical_vars]
cat_plots <- lapply(cat_vars, function(var) {
ggplot(cleaned_data, aes(x = .data[[var]])) +
geom_bar() +
labs(title = paste("Bar Plot of", var)) +
theme_minimal()
})
num_vars <- names(cleaned_data)[discrete_vars | continuous_vars]
num_plots <- lapply(num_vars, function(var) {
ggplot(cleaned_data, aes(x = .data[[var]])) +
geom_histogram(binwidth = 1, fill = "purple", color = "black") +
labs(title = paste("Histogram of", var)) +
theme_minimal()
})
install.packages("visdat")
library(visdat)
vis_dat(cleaned_data)
categorical_vars <- sapply(cleaned_data, is.factor)
discrete_vars <- sapply(cleaned_data, function(x) is.integer(x) || is.numeric(x))
continuous_vars <- sapply(cleaned_data, is.numeric)
cat_vars <- names(cleaned_data)[categorical_vars]
cat_plots <- lapply(cat_vars, function(var) {
ggplot(cleaned_data, aes(x = .data[[var]])) +
geom_bar() +
labs(title = paste("Bar Plot of", var)) +
theme_minimal()
})
num_vars <- names(cleaned_data)[discrete_vars | continuous_vars]
num_plots <- lapply(num_vars, function(var) {
ggplot(cleaned_data, aes(x = .data[[var]])) +
geom_histogram(binwidth = 1, fill = "purple", color = "black") +
labs(title = paste("Histogram of", var)) +
theme_minimal()
})
install.packages("visdat")
library(visdat)
vis_dat(cleaned_data)
numerical_data <- cleaned_data %>% select(TOTAL_OFFENDER_COUNT)
min_max_normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
z_score_standardize <- function(x) {
(x - mean(x)) / sd(x)
}
robust_scale <- function(x) {
(x - median(x)) / IQR(x)
}
scaled_data <- cleaned_data %>%
mutate(
MIN_MAX_NORMALIZED = min_max_normalize(TOTAL_OFFENDER_COUNT),
Z_SCORE_STANDARDIZED = z_score_standardize(TOTAL_OFFENDER_COUNT),
ROBUST_SCALED = robust_scale(TOTAL_OFFENDER_COUNT)
)
result_table <- select(scaled_data, TOTAL_OFFENDER_COUNT, MIN_MAX_NORMALIZED, Z_SCORE_STANDARDIZED, ROBUST_SCALED)
View(result_table)
# Filters rows with "unknown"
filtered_data <- cleaned_data %>%
filter(OFFENDER_RACE != "Unknown")
ggplot(filtered_data, aes(x = OFFENDER_RACE, y = TOTAL_INDIVIDUAL_VICTIMS, fill = TOTAL_INDIVIDUAL_VICTIMS)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Correlation between TOTAL_INDIVIDUAL_VICTIMS and OFFENDER_RACE",
x = "OFFENDER_RACE",
y = "TOTAL_INDIVIDUAL_VICTIMS") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(filtered_data, aes(x = OFFENDER_RACE, y = TOTAL_INDIVIDUAL_VICTIMS, fill = TOTAL_INDIVIDUAL_VICTIMS)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Correlation between TOTAL_INDIVIDUAL_VICTIMS and OFFENDER_RACE",
x = "OFFENDER_RACE",
y = "TOTAL_INDIVIDUAL_VICTIMS") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
top_offenses <- cleaned_data %>%
group_by(OFFENSE_NAME) %>%
summarize(Count = n()) %>%
arrange(desc(Count)) %>%
head(10)
View(top_offenses)
top_locations <- cleaned_data %>%
group_by(LOCATION_NAME) %>%
summarize(Total_Victims = sum(TOTAL_INDIVIDUAL_VICTIMS)) %>%
arrange(desc(Total_Victims)) %>%
head(10)
top_locations <- cleaned_data %>%
group_by(LOCATION_NAME) %>%
summarize(Total_Victims = sum(TOTAL_INDIVIDUAL_VICTIMS)) %>%
arrange(desc(Total_Victims)) %>%
head(10)
# Print the top 10 locations and victims
View(top_locations)
top_state_name <- cleaned_data %>%
group_by(STATE_NAME) %>%
summarize(Count = n()) %>%
arrange(desc(Count)) %>%
head(10)
top_bias_desc <- cleaned_data %>%
group_by(BIAS_DESC) %>%
summarize(Count = n()) %>%
arrange(desc(Count)) %>%
head(10)
filtered_data <- cleaned_data %>%
filter(STATE_NAME %in% top_state_name$STATE_NAME, BIAS_DESC %in% top_bias_desc$BIAS_DESC)
View(top_state_name)
View(top_bias_desc)
filtered_data <- cleaned_data %>%
filter(STATE_NAME %in% top_state_name$STATE_NAME, BIAS_DESC %in% top_bias_desc$BIAS_DESC)
ggplot(filtered_data, aes(x = STATE_NAME, fill = BIAS_DESC)) +
geom_bar(position = "dodge") +
labs(title = "Correlation between Top 10 STATE_NAME and Top 10 BIAS_DESC",
x = "STATE_NAME",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = "right")
encoded_data <- model.matrix(~ BIAS_DESC - 1, data = cleaned_data)
colnames(encoded_data) <- gsub("BIAS_DESC", "", colnames(encoded_data))
View(encoded_data)
